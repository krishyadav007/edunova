<center><h1>create new note</h1></center>

 <%= form_for @note  do |naw| %>
         
<div style="padding-left:15px; padding-right:15px;" class="row">
<% if @note.errors.any? %>
    <div id="error_explanation" class="alert alert-error" >
      <h4>
       <%=  pluralize(@note.errors.count, "error")  %> has been incurred
        
      </h4>
      <ul>
        <% @note.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

             Title
        <%= naw.text_field :name , :class => 'form-control'  %>
         Note from author <br>
    <%= naw.text_area :note_from_author , :"data-toggle" => "tooltip" , :"data-html" => "true" , :"data-placement" => "left" , :title => "tell users wether the note requires any prerequisites and what is purpose for creating this note." , :class => 'form-control' %>
              
    
    
              Labels <br>

    <%= naw.text_field :prereq ,  :rows => "7" , :id => 'prerequisites' , :"data-toggle" => "tooltip" , :"data-html" => "true" , :"data-placement" => "left" , :title => "tell the branch, this note belongs to. example maths, programming, history etc " %><br>
            Note
<br/>
    




   
</div>
</div>
     
     



<div class="note-wrapper" id="note-wrapper">
<%= render :partial => 'notes/widgets/article' , :locals => { :naw => 'addform' } %>

</div>

    <br/>
    
Add widget:-    <br/>    <br/>
 
<ul class="nav nav-pills">
 <li role="presentation"> <%= link_to "Add Article" , notes_new_note_add_article_path , :remote  => true %>  </li> <li role="presentation"> <%= link_to "Add Exercise" , notes_new_note_add_quiz_path , :remote  => true %>  </li>
 <li role="presentation"> <%= link_to "Add SVG Javascript Applet" , notes_new_note_add_applet_path , :remote  => true %> </li>

  <li role="presentation">    <%= link_to "Add Video" , notes_openlibrary_path , :remote  => true %>
</li>
</ul>
  


        <%= naw.submit "Create Note" , {:class => 'btn btn-primary btn-lg pull-right'} %>

  <% end %>
 </div>



<script type="text/javascript">
var engine = new Bloodhound({
  
  datumTokenizer: function(d) {
    return Bloodhound.tokenizers.obj.whitespace(d.value);
  },
  queryTokenizer: Bloodhound.tokenizers.whitespace,
   remote: {
    url: '/profiles/intrests/%QUERY.json',
     filter: function (engine) {
            // Map the remote source JSON array to a JavaScript object array
            return $.map(engine, function (intrest) {
                return {
                    value: intrest.value
                };
            });
        }
  }

});

engine.initialize();
$('#prerequisites').tokenfield({
  typeahead: [null, { displayKey: 'value', source: engine.ttAdapter() }]
});

$('#prerequisites').on('tokenfield:createtoken', function (event) {
    var existingTokens = $(this).tokenfield('getTokens');
    $.each(existingTokens, function(index, token) {
        if (token.value === event.attrs.value)
            event.preventDefault();
    });
});

var editor = new MediumEditor('.editable', {
    toolbar: {
        /* These are the default options for the toolbar,
           if nothing is passed this is what is used */
        allowMultiParagraphSelection: true,
        buttons: ['bold', 'italic', 'underline', 'anchor', 'h2', 'h3', 'quote'],
        diffLeft: 0,
        diffTop: -10,
        firstButtonClass: 'medium-editor-button-first',
        lastButtonClass: 'medium-editor-button-last',
        standardizeSelectionStart: false,
        static: false,
        relativeContainer: null,
        /* options which only apply when static is true */
        align: 'center',
        sticky: false,
        updateOnEmptySelection: false
    }
});
</script>