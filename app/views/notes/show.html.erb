<%= mathjax_tag %>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {
      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
      processEscapes: true
    }
  });
</script>
              








<div class="row panel no-gutter panel eq-height">

<div class="panel-default">
<div class="panel-body">


<div class="row" style="padding-left:15px;padding-right:15px;">
<div class="row">
  <div class="col-md-4">
  <div class="btn-group">
 
 <%= link_to :back , class: "btn btn-default btn-sm" do %>
 <span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span> Go Back                <% end %>

<% if @note.description.to_s != 'insight' %>

<%= link_to note_game_view_path(@note) , remote: :true , class: "btn btn-default btn-sm" do %>
 <span class="glyphicon glyphicon-play-circle" aria-hidden="true"></span> Game  <% end %>
<% end %>
<%= link_to note_html_view_path(@note) , remote: :true , class: "btn btn-default btn-sm" do %>
 <span class="glyphicon glyphicon glyphicon-file" aria-hidden="true"></span> View Note  <% end %>

<%= link_to profile_path(@note.user) , class: "btn btn-default btn-sm" do %>
 <span class="glyphicon glyphicon-user" aria-hidden="true"> </span> Creator Profile         <% end %> 
</div>

  </div>
  <div class="col-md-2 col-md-offset-2">


<div class="btn-group">
    <%= link_to  note_comment_view_path(@note)  ,:class => 'btn btn-primary btn-sm' , :remote => true do %> 
     <span class="glyphicon glyphicon-comment
" aria-hidden="true"></span> conversation 
 <span class="badge" id="comment_count"><%= @note.comments.count %>
</span>
    <% end %>



  </div>
</div>
   <div class="col-md-4">
<div class="btn-group pull-right">
  <% if current_user == @note.user %>
    <%= link_to  edit_note_path(@note)  ,:class => 'btn btn-default btn-sm' do %> 
<span class="glyphicon glyphicon-pencil"> </span> Edit 
<% end %>
  <% end %>
  <% if @note.description.to_s != 'insight' %>

     <%= link_to  note_display_quiz_path(@note)  ,:class => 'btn btn-default btn-sm' , :remote => true  do %>
<span class="glyphicon glyphicon-ok"></span> Quiz It! 
      <% end %> 
<% end %>

  
</div>

<% if current_user %>
                  <div class="btn-group pull-right" id="voteapp">

                <% if current_user.voted_up_on?(@note) %> 


                <%= link_to unlike_note_path(@note) , method: :put , class: "btn btn-default btn-sm" , :id => 'unlike_note_path' , remote: true do %>
                <span class="glyphicon glyphicon-chevron-down" aria-hidden="true"></span>

                
                Unvote <%= @note.get_upvotes.size %>


                <% end %>

                <% else %>

<%= link_to like_note_path(@note) , method: :put , class: "btn btn-default btn-sm" , :id => 'like_note_path' , remote: true do %>
                <span class="glyphicon glyphicon-chevron-up" aria-hidden="true"></span>

                
                Upvote <%= @note.get_upvotes.size %>
                <% end %>

                <% end %>


               
  
                </div>
                    <% end %>

                  </div>


   </div>

</div>



 


 


<hr class="style" />
       











                


                <div class="media" id="loadsnoteinfo">
                    <a class="pull-left" href="#">
    <%= attachment_image_tag(@note.user, :image, :fill, 130, 130 ,fallback: "deafult-pic-130.png") %>

                    </a>
                    
                    <div class="media-body">
                        <h2 class="media-heading">  <%= @note.name %>  <small>by 
                          <%= @note.user.name %> (@<%= @note.user.username %>)</small>


                        </h2>
<b>labels : </b>
    <% intress = @note.prereq.to_s.split(',') %>
 <% for i in 0..(intress.count-1) %>     
    #<%= @note.prereq.to_s.split(',')[i].strip %>
  
    <% end %> 
<br/>                        
                       
    <%= @note.note_from_author %>
                    </div>


                </div>





<div id="mainconnote">
     <% if @note.description.to_s != 'insight' %>

  <div id="tohihe">

<div id='loading'>
     <div class="progress">
  <div class="progress-bar progress-bar-striped active" role="progressbar"
  aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width:100%">
    loading...
  </div>
</div>
    </div>

            <center><canvas id='myGame' width="1050" height="600"></canvas></center>
            

<center>
<div class="btn-group">
<a class="btn btn-default btn-sm" >
 levels :       </a>

  <% if @get_level %>
        
          <% for i in  1..@get_level.current_level %>
          <%= link_to note_button_top_level_path({:note_id => @note.id , :query => i.to_s}) , class: "btn btn-default btn-sm" , id: i.to_s , remote: true do %>
         <%= i %>       <% end %>

        <% end %>

         <% for j in @get_level.current_level+1..@note.total_levels %>
         <%= link_to note_path(@note) , class: "btn btn-default btn-sm" , id: j.to_s , disabled: "disabled" , remote: true do %>
         <%= j %>       <% end %>
         <% end %>

<% else %>

        <% for k in 1..@note.total_levels %>
         <%= link_to note_path(@note) , class: "btn btn-default btn-sm" , id: k.to_s , disabled: "disabled" , remote: true do %>
         <%= k %>      
          <% end %>
          <% end %>

<% end %>
</div>
</center>
</div>
<% else %>
<%= render 'html_view'  %>
<% end %>
</div>

  <div id="comments" class="col-lg-8" >
</div>
</div>
</div>
</div>

    <% if @note.description.to_s != 'insight' %>

<script type="text/javascript">
function closemodal() {
    $('#myModal').modal('hide');
    gettogame();


};
function closequestion(){
  $('#e').popover('hide');
  gettogame();
}
function gettogame()
{
   var canvas=document.getElementById('myGame');
         Q.unpauseGame();

    canvas.focus();

};
</script>

<script type="text/javascript">
var Q  = Quintus({development: true})
        .include("Sprites, Scenes, Input, 2D, Anim, Touch, UI")
        .setup("myGame")
        .controls().touch()

var SPRITE_BOX = 1;

Q.gravityY = 2000;

Q.Sprite.extend("Player",{

  init: function(p) {

    this._super(p,{
      sheet: "player",
      sprite: "player",
      collisionMask: SPRITE_BOX, 
      x: 40,
      y: 555,
      standingPoints: [ [ -16, 44], [ -23, 35 ], [-23,-48], [23,-48], [23, 35 ], [ 16, 44 ]],
      duckingPoints : [ [ -16, 44], [ -23, 35 ], [-23,-10], [23,-10], [23, 35 ], [ 16, 44 ]],
      speed: 500,
      jump: -700
    });

    this.p.points = this.p.standingPoints;

    this.add("2d, animation");
  },

  step: function(dt) {
    this.p.vx += (this.p.speed - this.p.vx)/4;

    if(this.p.y > 555) {
      this.p.y = 555;
      this.p.landed = 1;
      this.p.vy = 0;
    } else {
      this.p.landed = 0;
    }

    if(Q.inputs['up'] && this.p.landed > 0) {
      this.p.vy = this.p.jump;
    } 

    this.p.points = this.p.standingPoints;
    if(this.p.landed) {
      if(Q.inputs['down']) { 
        this.play("duck_right");
        this.p.points = this.p.duckingPoints;
      } else {
        this.play("walk_right");
      }
    } else {
      this.play("jump_right");
    }

    this.stage.viewport.centerOn(this.p.x + 300, 400 );

  }
});

Q.Sprite.extend("Box",{
  init: function() {

    var levels = [ 565, 540, 500, 450 ];

    var player = Q("Player").first();
    this._super({
      x: player.p.x + Q.width + 50,
      y: levels[Math.floor(Math.random() * 3)],
      frame: Math.random() < 0.5 ? 1 : 0,
      scale: 2,
      type: SPRITE_BOX,
      sheet: "crates",
      vx: -600 + 200 * Math.random(),
      vy: 0,
      ay: 0,
      theta: (300 * Math.random() + 200) * (Math.random() < 0.5 ? 1 : -1)
    });


    this.on("hit");
  },

  step: function(dt) {
    this.p.x += this.p.vx * dt;


    this.p.vy += this.p.ay * dt;
    this.p.y += this.p.vy * dt;
    if(this.p.y != 565) {
      this.p.angle += this.p.theta * dt;
    }

    if(this.p.y > 800) { this.destroy(); }

  },

  hit: function() {
    this.p.type = 0;
    this.p.collisionMask = Q.SPRITE_NONE;
    this.p.vx = 200;
    this.p.ay = 400;
    this.p.vy = -300;
    this.p.opacity = 0.5;
  }
  

});

Q.GameObject.extend("BoxThrower",{
  init: function() {
    this.p = {
      launchDelay: 0.75,
      launchRandom: 1,
      launch: 2
    }
  },

  update: function(dt) {
    this.p.launch -= dt;

    if(this.p.launch < 0) {
      this.stage.insert(new Q.Box());
      this.p.launch = this.p.launchDelay + this.p.launchRandom * Math.random();
    }
  }

});


Q.scene("level1",function(stage) {

  stage.insert(new Q.Repeater({ asset: "<%= asset_path('background-wall.png') %>",
                                speedX: 0.5 }));

  stage.insert(new Q.Repeater({ asset: "<%= asset_path('background-floor.png') %>",
                                repeatY: false,
                                speedX: 1.0,
                                y: 300 }));

  stage.insert(new Q.BoxThrower());

  stage.insert(new Q.Player());
  stage.add("viewport");

});
  
Q.load("<%= asset_path('player.json') %>, <%= asset_path('player.png') %> ,<%= asset_path('background-wall.png') %>,<%= asset_path('background-floor.png') %>,<%= asset_path('crates.png') %>, <%= asset_path('crates.json') %>", function() {
    Q.compileSheets("<%= asset_path('player.png') %>","<%= asset_path('player.json') %>");
    Q.compileSheets("<%= asset_path('crates.png') %>","<%= asset_path('crates.json') %>");
    Q.animations("player", {
      walk_right: { frames: [0,1,2,3,4,5,6,7,8,9,10], rate: 1/15, flip: false, loop: true },
      jump_right: { frames: [13], rate: 1/10, flip: false },
      stand_right: { frames:[14], rate: 1/10, flip: false },
      duck_right: { frames: [15], rate: 1/10, flip: false },
    });
    Q.stageScene("level1");
  
});




</script>
<% end %>