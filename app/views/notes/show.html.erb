<%= mathjax_tag %>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {
      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
      processEscapes: true
    }
  });
</script>
              








<div class="row panel no-gutter panel eq-height">

<div class="panel-default">
<div class="panel-body">


<div class="row" style="padding-left:15px;padding-right:15px;">
<div class="row">
  <div class="col-md-4">
  <div class="btn-group">
 
 <%= link_to :back , class: "btn btn-default btn-sm" do %>
 <span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span> Go Back                <% end %>

<% if @note.description.to_s != 'insight' %>

<%= link_to note_game_view_path(@note) , remote: :true , class: "btn btn-default btn-sm" do %>
 <span class="glyphicon glyphicon-play-circle" aria-hidden="true"></span> Game  <% end %>
<% end %>
<%= link_to note_html_view_path(@note) , remote: :true , class: "btn btn-default btn-sm" do %>
 <span class="glyphicon glyphicon glyphicon-file" aria-hidden="true"></span> View Note  <% end %>

<%= link_to profile_path(@note.user) , class: "btn btn-default btn-sm" do %>
 <span class="glyphicon glyphicon-user" aria-hidden="true"> </span> Creator Profile         <% end %> 
</div>

  </div>
  <div class="col-md-2 col-md-offset-2">


<div class="btn-group">
    <%= link_to  note_comment_view_path(@note)  ,:class => 'btn btn-primary btn-sm' , :remote => true do %> 
     <span class="glyphicon glyphicon-comment
" aria-hidden="true"></span> conversation 
 <span class="badge" id="comment_count"><%= @note.comments.count %>
</span>
    <% end %>



  </div>
</div>
   <div class="col-md-4">
<div class="btn-group pull-right">
  <% if current_user == @note.user %>
    <%= link_to  edit_note_path(@note)  ,:class => 'btn btn-default btn-sm' do %> 
<span class="glyphicon glyphicon-pencil"> </span> Edit 
<% end %>
  <% end %>
  <% if @note.description.to_s != 'insight' %>

     <%= link_to  note_display_quiz_path(@note)  ,:class => 'btn btn-default btn-sm' , :remote => true  do %>
<span class="glyphicon glyphicon-ok"></span> Quiz It! 
      <% end %> 
<% end %>

  
</div>

<% if current_user %>
                  <div class="btn-group pull-right" id="voteapp">

                <% if current_user.voted_up_on?(@note) %> 


                <%= link_to unlike_note_path(@note) , method: :put , class: "btn btn-default btn-sm" , :id => 'unlike_note_path' , remote: true do %>
                <span class="glyphicon glyphicon-chevron-down" aria-hidden="true"></span>

                
                Unvote <%= @note.get_upvotes.size %>


                <% end %>

                <% else %>

<%= link_to like_note_path(@note) , method: :put , class: "btn btn-default btn-sm" , :id => 'like_note_path' , remote: true do %>
                <span class="glyphicon glyphicon-chevron-up" aria-hidden="true"></span>

                
                Upvote <%= @note.get_upvotes.size %>
                <% end %>

                <% end %>


               
  
                </div>
                    <% end %>

                  </div>


   </div>

</div>



 


 


<hr class="style" />
       











                


                <div class="media" id="loadsnoteinfo">
                    <a class="pull-left" href="#">
    <%= attachment_image_tag(@note.user, :image, :fill, 130, 130 ,fallback: "deafult-pic-130.png") %>

                    </a>
                    
                    <div class="media-body">
                        <h2 class="media-heading">  <%= @note.name %>  <small>by 
                          <%= @note.user.name %> (@<%= @note.user.username %>)</small>


                        </h2>
<b>labels : </b>
    <% intress = @note.prereq.to_s.split(',') %>
 <% for i in 0..(intress.count-1) %>     
    #<%= @note.prereq.to_s.split(',')[i].strip %>
  
    <% end %> 
<br/>                        
                       
    <%= @note.note_from_author %>
                    </div>


                </div>





<div id="mainconnote">
     <% if @note.description.to_s != 'insight' %>

  <div id="tohihe">

<div id='loading'>
     <div class="progress">
  <div class="progress-bar progress-bar-striped active" role="progressbar"
  aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width:20%">
    loading...
  </div>
</div>
    </div>

            <center><canvas id='myGame' width="1100" height="600"></canvas></center>
            

<center>
<div class="btn-group">
<a class="btn btn-default btn-sm" >
 levels :       </a>

  <% if @get_level %>
        
          <% for i in  1..@get_level.current_level %>
          <%= link_to note_button_top_level_path({:note_id => @note.id , :query => i.to_s}) , class: "btn btn-default btn-sm" , id: i.to_s , remote: true do %>
         <%= i %>       <% end %>

        <% end %>

         <% for j in @get_level.current_level+1..@note.total_levels %>
         <%= link_to note_path(@note) , class: "btn btn-default btn-sm" , id: j.to_s , disabled: "disabled" , remote: true do %>
         <%= j %>       <% end %>
         <% end %>

<% else %>

        <% for k in 1..@note.total_levels %>
         <%= link_to note_path(@note) , class: "btn btn-default btn-sm" , id: k.to_s , disabled: "disabled" , remote: true do %>
         <%= k %>      
          <% end %>
          <% end %>

<% end %>
</div>
</center>
</div>
<% else %>
<%= render 'html_view'  %>
<% end %>
</div>

  <div id="comments" class="col-lg-8" >
</div>
</div>
</div>
</div>

    <% if @note.description.to_s != 'insight' %>

<script type="text/javascript">
function closemodal() {
    $('#myModal').modal('hide');
    gettogame();


};
function closequestion(){
  $('#e').popover('hide');
  gettogame();
}
function gettogame()
{
   var canvas=document.getElementById('myGame');
         Q.unpauseGame();

    canvas.focus();

};
</script>


<!-- ____________________________________  needs to be removed  ______________________________________________________ -->

 <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" id="exampleModalLabel">PROGRAMMING IN C++ </h4>
      </div>
      <div class="modal-body"> 
The following is an example of a very basic program in c++. <br>
 <code> 
 #include&ltiostream.h&gt<br>
 Void main()<br>
  {<br>
  Cout<<”HELLO   WORLD !!!”;<br>
  }<br></code>  
<strong>Output:-</strong><br>
HELLO  WORLD !!!<br>
The first line of code  includes a header file. Header files are included at the beginning to provide all the necessary functions required in any program. Here iostream is a header file which provides us with input & output streams. Header files contains predeclared function libraries, which can be used by users for their ease.
The second line is the main function of the program . the compilation of the program begins from this line/function. It holds the executing part of program. The keyword ‘ void ‘ is used so that the function doesn’t return any value .
the brackets define a block of code . Anything written within the curly brackets is a part of the main function. 
The fourth line is used to output anything on the output screen.Message has to be within double-quotes.
The syntax is :<br><code>
Cout&lt”{message to be printed on output screen }”&gt;</code>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

 <a id="e" tabindex="0" data-toggle="popover" data-trigger="focus" data-html="true"   ></a>
<div  id="but" style="display: none">
  <form role="form">
      <div class="well" id="t" style="background-color:lavender;"></div>
      <div class="radio ">
      <label><input type="radio" name="optradio" value='1' ><div id="1">Option 1</div></label>
    </div>
    <div class="radio">
      <label><input type="radio" name="optradio" value='2'><div id="2">Option 2</div></label>
    </div>
    <div class="radio">
      <label><input type="radio" name="optradio" value='3' ><div id="3">Option 3</div></label>
    </div>
<div class="radio ">
      <label><input type="radio" name="optradio" val='4' ><div id="4">Option 4</div></label>
    </div>
  </form>
  <div id="msg"></div>
  <button  class="btn btn-info" id="check">Submit</button>
  <button class="btn btn-success " id="close">Continue</button>

</div>

<!-- ____________________________________  needs to be removed  ______________________________________________________ -->

<script type="text/javascript">
  
window.addEventListener("load",function() {

var Q = window.Q = Quintus({imagePath:"/assets/",dataPath:"/assets/",audioPath:"/assets/",development:true})
        .include("Audio,Sprites, Scenes, Input, 2D, Anim, Touch, UI,TMX")
        .setup("mygame",{ width: 1100, height: 600 })
        .controls(true).touch()

var final_score=0,
    level_score=0,
    temp_score=0,
    level=0,
    temp_level=0,
    startx,starty,initial=1;
Q.Sprite.extend("Player",{

  init: function(p) {
   
    this._super(p, {
      sheet: "main",
      sprite: "player",
       jumpSpeed: -550,
       speed: 200 ,
        standingPoints: [ [8,30],[-8,30],[-8,-30],[8,-30]],
    //  duckingPoints : [ [ -16, 44], [ -23, 35 ], [-23,-48], [23,-10], [23, 35 ], [ 16, 44 ]],
      frame: 1,
       type: Q.SPRITE_PLAYER,
      collisionMask: Q.SPRITE_DEFAULT | Q.SPRITE_ENEMY

    });
  this.p.points = this.p.standingPoints;


    this.add('2d, platformerControls,animation');
    this.on("hit.sprite",function(collision) {

                if(collision.obj.isA("Door")) {
                  initial=1;
                  final_score=level_score+200;
                  level_score=0;
            Q.stageScene("endGame",1, { label: "You Won!" }); 
            this.destroy();
            
          
      
          }
        });

  },
   step: function(dt) {
            if(Q.inputs['right']) {
      this.play("run_right");
    } else if(this.p.vx < 0) {
      this.play("run_left");
    } else {
      this.play("stand");
    }

    if(this.p.vy > 1200) {
      this.stage.unfollow();
        Q.audio.play("<%= asset_path('hit(1).mp3') %>");
        Q.stageScene("endGame",2, { label: "You Died" }); 
      this.destroy();  

    }
        },

});
Q.Sprite.extend("Door",{
  init: function(p){
    this._super(p,{
      sheet:'door',
      collisionMask: Q.SPRITE_PLAYER
    });
  }
});
Q.Sprite.extend("Enemy", {
  init: function(p) {

    this._super(p,{
      sheet: p.sprite,
      vx: 150,
      type: Q.SPRITE_ENEMY,
      collisionMask: Q.SPRITE_DEFAULT |Q.SPRITE_ENEMY 
    });

    this.add("2d, aiBounce, animation");
    this.on("bump.left,bump.right,bump.bottom",function(collision) {
      if(collision.obj.isA("Player")) { 
        Q.audio.play("<%= asset_path('hit(1).mp3') %>");
                  Q.stageScene("endGame",2, { label: "You Died" });   
                collision.obj.destroy();
      }
    });
      this.on("bump.top",function(collision) {
      if(collision.obj.isA("Player")) { 
        Q.audio.play("<%= asset_path('hit.mp3') %>");
        this.destroy(); 
        collision.obj.p.vy = -300; 
        level_score+=100;
         Q.stageScene("score",1, { 
  label: "score: "+level_score
});
 // alert("x="+collision.obj.p.x+"  y="+collision.obj.p.y);
      }
    });
  },
  step: function(dt) {
        if(this.p.vx > 0) {
          this.p.flip="x";
          this.play("walk");
        } else if(this.p.vx < 0) {
          this.p.flip="";
          this.play("walk");
        }
    },
});
Q.Enemy.extend("Snail", {
  init: function(p) {
    this._super(p,{
    //  w: 55,
      //h: 34
    });
  }

});
Q.Enemy.extend("Fly", {
  init: function(p) {
    this._super(p,{
     w: 55,
      h: 34
    });
  }

});
Q.Enemy.extend("Slime", {
  init: function(p) {
    this._super(p,{
     w: 55,
      h: 36
    });
  }

});
var cnt=0,temp;

Q.Sprite.extend("Pole",{
  init:function(p){
    this._super(p,{
      sheet:p.sprite,
      frame:1,
      scale:1.2,
       collisionMask: Q.SPRITE_PLAYER,
    });
     this.add('2d,animation');
    this.on("bump.left,bump.right,bump.top",function(collision){ 
  if(collision.obj.isA("Player"))
  { initial=0;
    final_score+=level_score;
     startx=collision.obj.p.x;
  starty=collision.obj.p.y;
    this.play("open");
     if(cnt==0 || temp!=p.flag_no )
        { cnt++;
          temp=p.flag_no;
          console.log("cnt="+cnt+"temp="+temp+"flag="+p.flag_no);
           Q.output(this.p);
        }    
   
  }
});
       
}
});

  Q.output=function(p)
  { 
    var rad={"q1":{"qt":"who created c++ ?","1":"Bjarne Stroustrup","2":"Neil Armstrong","3":"Dennis Ritchie","4":"Aishwarya","correct":"1"},
          "q2":{"qt":"can computers out perform humans?","1":"yes!","2":"no!","3":"maybe?","4":"i dont know!","correct":"2"},
          "q3":{"qt":"cout is used for which purpose?","1":"store information","2":"for taking input","3":"displaying ouput","4":"none of these","correct":"3"},
          "q4":{"qt":"what do header files contain?","1":"previous programs","2":"predeclared function libraries","3":"output of the program","4":"all of these","correct":"2"}};

 document.getElementById("t").innerHTML=rad["q"+cnt]["qt"];
for( var i=1;i<5;i++)
 document.getElementById(i).innerHTML=rad["q"+cnt][""+i];


 var xi= window.innerWidth/2-40, yi= window.innerHeight/2;
$('#e').popover({ html : true, 
        content: function() {
          return $('#but').html();
        }
      });
 $('#e').css({'position':'absolute','top':yi,'right':xi}).popover('show');
 
 console.log("cnt="+cnt);
 $('#e').on('shown.bs.popover', function (e) { $('#b').show();
      Q.pauseGame();
 });
closeb=0;
 $('#check').click(function(){
                
                       if($('input[name=optradio]:checked').val()==rad["q"+cnt]["correct"])
               {$("#msg").html('<i class="fa fa-check" style="font-size:30px;color:green"></i><strong>CORRECT ANSWER</strong> ');
                closeb=1;
                } 
              else
                { cnt--;
               $("#msg").html('<i class="fa fa-close" style="font-size:30px;color:red"></i><strong>WRONG ANSWER</strong>');
               closeb=2;
                }
                $('#check').remove();
                     });
 $('#close').click(function(){
            if(closeb==1)
                     {$('#b').hide();
                      $('#e').popover('hide');
                       Q.unpauseGame();
                       $('#mygame').focus();} 
                       else if(closeb==2)
                       {
                        $('#e').popover('hide');
                        Q.stageScene("note");
                       }
                        
                     });

  }

Q.Sprite.extend("Coin",{
  init:function(p){
              this._super(p,{ 
                sheet:p.sprite,
                gravity:0,
                collisionMask: Q.SPRITE_PLAYER,
               });
               this.add('2d,animation');
              this.on("bump.left,bump.right,bump.top",function(collision){ 
            if(collision.obj.isA("Player"))
            { level_score+=50;
              Q.audio.play('<%= asset_path('coin.mp3') %>');
               this.destroy(); 
                Q.stageScene("score",1, { 
  label: "score: "+level_score
});
             }
          });
                 
         }
});
  Q.scene("score",function(stage) {
  var label = stage.insert(new Q.UI.Text({
    x: Q.width/4, 
    y: 10,color:"#000099",
    label: stage.options.label
  }));
   var b= stage.insert(new Q.UI.Button({x: Q.width/2,y:20 ,fill:'#CCCCCC',label:"Skip Level"}));
 b.on("click",function(){
Q.clearStages();
//flag=flag+newscore;
  //     disp=flag;
    //   l++;comp=l;pflag=0;
//Q.stageScene("quotes");
 });
});

Q.scene('note',function(stage){
  $('#exampleModal').modal('show') ;
$('#exampleModal').on('shown.bs.modal', function (e) {
  Q.pauseGame();
})
$('#exampleModal').on('hidden.bs.modal', function (e) {
  Q.unpauseGame();
   $('#mygame').focus();
    Q.stageScene("level");
 })
});
Q.scene("level",function(stage) {
if(initial)
{
  cnt=0,startx=200,starty=500;
}
//stage.insert(new Q.Repeater({ asset: "back.png",repeatY:true, speedX: 10, speedY: 0.5 })); 
  Q.stageTMX("<%= asset_path('level.tmx') %>",stage);

  var player = stage.insert(new Q.Player({x:startx,y:starty}));
   stage.add("viewport").follow(player);
  Q.audio.play("<%= asset_path('intro.mp3') %>",{ loop: true });
   Q.stageScene("score",1, { 
  label: "score: "+final_score
}); 

});


Q.scene('endGame',function(stage) {
  //Q.audio.stop();
      var container = stage.insert(new Q.UI.Container({
        x: Q.width/2, y: Q.height/2, fill: "rgba(0,0,0,0.5)"
      }));
 
      var button = container.insert(new Q.UI.Button({ x: 0, y: 0, fill: "#CCCCCC",
                                                      label: "Play Again" }))        
      var label = container.insert(new Q.UI.Text({x:0, y: -10 - button.p.h, color: "#ffffff",
                                                       label: stage.options.label }));
       
      button.on("click",function() {
        Q.clearStages();
        Q.stageScene('note');
      });
 
        container.fit(20);
});

Q.loadTMX( "<%= asset_path('level.tmx') %>,<%= asset_path('main.json') %>,<%= asset_path('main.png') %>,<%= asset_path('enemies.png') %>,<%= asset_path('enemies.json') %>,<%= asset_path('bird.json') %>,<%= asset_path('bird.png') %>,<%= asset_path('pole.json') %>,<%= asset_path('pole.png') %>,<%= asset_path('collectables.json') %>,<%= asset_path('collectables.png') %>,<%= asset_path('hit.mp3') %>,<%= asset_path('hit(1).mp3') %>,<%= asset_path('coin.mp3') %>,<%= asset_path('intro.mp3') %>", function() {
  Q.compileSheets("door.png","door.json");
  Q.compileSheets("main.png","main.json");
 Q.compileSheets("<%= asset_path('enemies.png') %>","<%= asset_path('enemies.json') %>");
 Q.compileSheets("pole.png","pole.json");
 Q.compileSheets("<%= asset_path('collectables.png') %>","<%= asset_path('collectables.json') %>");
        Q.animations('player', {
        run_left: { frames: [11,12,13,14,15,16,17,18,19], next: 'stand_left', rate: 1/10},
        run_right: { frames: [0,1,2,3,4,5,6,7,8,9], next: 'stand_right', rate: 1/10},
        stand: { frames: [0]},
        jump: { frames: [8], loop:false, rate: 1},
    });
         var EnemyAnimations = {
      walk: { frames: [0,1], rate: 1/3, loop: true },
      dead: { frames: [2], rate: 1/10 }
    };
    Q.animations("fly", EnemyAnimations);
    Q.animations("slime", EnemyAnimations);
    Q.animations("snail", EnemyAnimations);
    Q.animations('pole',{
        closed:{frames:[1],rate:1/10,flip: false},
         open:{frames:[3,4,5,6,7,8,9,10,11],rate: 1/5, flip: false, loop: true }
  });
  /* Q.animations("bird",{
    fly:{frames:[0,1,2,3,4,5,6,7],rate:1/5,loop:true}
   });
  */
  Q.stageScene("note");
},{ progressCallback: function(loaded,total){
 var element = document.getElementById("loading");
    element.style.width = Math.floor(loaded/total*100) + "%";
   if (loaded == total) {
      document.getElementById("loading").remove();
    }
}
});


});
  
</script>

<% end %>